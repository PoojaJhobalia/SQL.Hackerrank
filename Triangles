//* TYPE OF TRIANGLES:
1. Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle. *//

SELECT CASE 
    WHEN A+B<=C OR B+C<=A OR C+A<=B THEN 'Not A Triangle'
    WHEN A=B AND B=C THEN 'Equilateral' 
    WHEN A!=B AND B!=C AND C!=A THEN 'Scalene'
    ELSE 'Isosceles'
END
FROM TRIANGLES;

//* INCORRECT : SELECT CASE 
        WHEN A+B<=C OR A+C<=B OR B+C<=A THEN 'Not a Triangle'
        WHEN A=B AND B=C THEN 'Equilateral'
        WHEN A=B OR B=C OR A=C  THEN 'Isosceles'
        ELSE 'Scalene'
        END
FROM TRIANGLES; *//

//* 2. Print * in TRIANGLE
P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):

* * * * * 
* * * * 
* * * 
* * 
*
Write a query to print the pattern P(20). *//

DECLARE @cnt INT = 20;

WHILE @cnt >=1
BEGIN
   PRINT REPLICATE('* ', @cnt);
   SET @cnt = @cnt - 1;
END;

3. P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
* 
* * 
* * * 
* * * * 
* * * * *
Write a query to print the pattern P(20). *//

DECLARE @cnt INT = 1;

WHILE @cnt <=20
BEGIN
   SELECT REPLICATE("* ", @cnt);
   SET @cnt = @cnt + 1;
END;
